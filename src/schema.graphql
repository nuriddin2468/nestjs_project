# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Auth {
  """JWT access token"""
  accessToken: JWT!

  """JWT refresh token"""
  refreshToken: JWT!
  user: User!
}

input ChangePasswordInput {
  newPassword: String!
  oldPassword: String!
}

type Company {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  logo: String!
  schools: [School!]!
  title: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  users(pagination: PaginationInput!): [User!]!
}

input CreateCompanyInput {
  logo: String!
  title: String!
  userIds: [String!]
}

input CreatePostInput {
  content: String!
  title: String!
}

input CreateSchoolInput {
  title: String!
}

input CreateStudentInput {
  email: String!
  password: String!
  schoolId: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""
A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.
"""
scalar JWT

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  changePassword(data: ChangePasswordInput!): User!
  createCompany(data: CreateCompanyInput!): Company!
  createPost(data: CreatePostInput!): Post!
  createSchool(companyId: String, data: CreateSchoolInput!): School!
  createStudent(data: CreateStudentInput!): Student!
  deleteCompany(companyId: String): Company!
  login(data: LoginInput!): Auth!
  refreshToken(token: JWT!): Token!
  signup(data: SignupInput!): Auth!
  updateCompany(companyId: String, data: UpdateCompanyInput!): Company!
  updateUser(data: UpdateUserInput!): User!
}

"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  asc
  desc
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

input PaginationInput {
  cursor: String
  take: Int! = 10
}

type Post {
  author: User
  content: String

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  published: Boolean!
  title: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type PostConnection {
  edges: [PostEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type PostEdge {
  cursor: String!
  node: Post!
}

input PostOrder {
  direction: OrderDirection!
  field: PostOrderField!
}

"""Properties by which post connections can be ordered."""
enum PostOrderField {
  content
  createdAt
  id
  published
  title
  updatedAt
}

type Query {
  fetchCompanies: [Company!]!
  fetchCompany(companyId: String): Company!
  fetchStudents: [Student!]!
  fetchUsers: [User!]!
  hello(name: String!): String!
  helloWorld: String!
  me: User!
  post(postId: String!): Post!
  publishedPosts(after: String, before: String, first: Int, last: Int, orderBy: PostOrder, query: String, skip: Int): PostConnection!
  school(id: String!): School!
  userPosts(userId: String!): [Post!]!
}

"""User role"""
enum Role {
  ADMIN
  ADMINISTRATOR
  DIRECTOR
  GUEST
  STUDENT
  TEACHER
  USER
}

type School {
  company: Company!
  id: ID!
  title: String!
}

input SignupInput {
  email: String!
  firstname: String
  lastname: String
  password: String!
}

type Student {
  userInfo: User!
}

type Subscription {
  postCreated: Post!
}

type Token {
  """JWT access token"""
  accessToken: JWT!

  """JWT refresh token"""
  refreshToken: JWT!
}

input UpdateCompanyInput {
  addUserIds: [String!]
  logo: String
  removeUserIds: [String!]
  title: String
}

input UpdateUserInput {
  email: String
  firstname: String
  lastname: String
  role: Role
}

type User {
  company: Company

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  email: String!
  firstname: String
  id: ID!
  lastname: String
  role: Role!
  school: School
  schoolId: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}